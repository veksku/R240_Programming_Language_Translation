%{
#include <iostream>
#include <cstdlib>
#include <map>
#include <cmath>
#include <string>

#define YYDEBUG 1

using namespace std;

	int yylex();
	
	void yyerror(string s){
		cerr << s << endl;
		exit(EXIT_FAILURE);
	}
	
	map<string, double> tablica_simbola;
%}

%union {
	bool b;
	double d;
	string *s;
}

%token BROJ TEKST STAMPAJ IF ELSE BLOCK ENDBLOCK SEP
%token MANJEJEDNAKO VECEJEDNAKO DVOJEDNAKO RAZLICITO
%token CBDELJENJE UMINUS  

%token<s> STRING ID
%token<d> NUM

%type<d> izraz
%type<b> uporedjivanje program naredba

%left '-' '+'
%left '*' '/' '%'  CBDELJENJE
%left '^'
%right UMINUS

%start program

%%
program: naredba program {}
| naredba

naredba: BROJ ID ';' {
	map<string, double>::iterator i = tablica_simbola.find(*$2);
	if ( i != tablica_simbola.end())
		yyerror("Promenljiva vec postoji");
	tablica_simbola[*$2] = 0;
	delete $2;
 }
| BROJ ID '=' izraz ';' {
	map<string, double>::iterator i = tablica_simbola.find(*$2);
	if ( i != tablica_simbola.end())
		yyerror("Promenljiva vec postoji");
	tablica_simbola[*$2] = $4;
	delete $2;
 }
| TEKST ID '=' STRING ';' {}
| STAMPAJ izraz ';' {
	cout << $2 << endl;
 }
| STAMPAJ STRING ';' {
	string printable = $2->substr(1, $2->size() - 2);
	cout << printable << endl;
 }
| uporedjivanje ';' {}
| izraz ';' { cout << $1 << endl; }
| IF uporedjivanje ':' BLOCK program ENDBLOCK {}
| IF uporedjivanje ':' BLOCK program ENDBLOCK ELSE ':' BLOCK program ENDBLOCK {}
;

uporedjivanje: izraz '<' izraz { $$ = $1 < $3; }
| izraz MANJEJEDNAKO izraz { $$ = $1 <= $3; }
| izraz '>' izraz { $$ = $1 > $3; }
| izraz VECEJEDNAKO izraz { $$ = $1 >= $3; }
| izraz DVOJEDNAKO izraz { $$ = $1 == $3; }
| izraz RAZLICITO izraz { $$ = $1 != $3; }
;

izraz: izraz '+' izraz { $$ = $1 + $3; }
| izraz '-' izraz { $$ = $1 - $3; }
| izraz '*' izraz { $$ = $1 * $3; }
| izraz '/' izraz { $$ = $1 / $3; }
| izraz '%' izraz { $$ = fmod($1,$3); }
| izraz '^' izraz { $$ = pow($1,$3); }
| izraz CBDELJENJE izraz { $$ = int($1/$3); }
| '-' izraz %prec UMINUS { $$ = -$2; }
| '(' izraz ')' { $$ = $2; }
| NUM { $$ = $1; }
| ID {
	map<string, double>::iterator i = tablica_simbola.find(*$1);
	if (i == tablica_simbola.end())
		yyerror("Promenljiva nije prethodno deklarisana");
	$$ = i->second;
 }
;
%%

int main(){
	//yydebug = 1;
	yyparse();
	return 0;
}
